ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 100, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
#area under the curve
auc(testProbs$obs, testProbs$pred)
library(pROC)
# Assuming classProbs contains the predicted probabilities for the positive class
roc_curve <- roc(testProbs$obs, testProbs$pred)
# Plot ROC curve using ggplot2
ggplot(data = roc_curve, aes(x = 1 - specificity, y = sensitivity)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(x = "False Positive Rate", y = "True Positive Rate", title = "ROC Curve")
# why is plot not showing up?
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
# why is plot not showing up?
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'black')
# why is plot not showing up?
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
#area under the curve
auc(testProbs$obs, testProbs$pred)
View(testProbs)
# Assuming classProbs contains the predicted probabilities for the positive class
roc_curve <- roc(testProbs$obs, testProbs$pred)
# Plot ROC curve using ggplot2
ggplot(data = roc_curve, aes(x = 1 - specificity, y = sensitivity)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(x = "False Positive Rate", y = "True Positive Rate", title = "ROC Curve")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(pscl)
library(plotROC)
library(pROC)
library(sf)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tigris)
library(viridis)
library(ggplot2)
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
# dependent variable
inundation <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_depe.csv")
# independent variables
elevation <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_elev.csv")
flow_acc <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_fac.csv")
land_use <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_lulc.csv")
slope <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_slope.csv")
water_body <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_water.csv")
# Creating tables to combine exploratory data
flood <- inundation %>%
select(OBJECTID, RANGE) %>%
rename(flood = RANGE) %>%
mutate(flood = factor(flood))
# 1 = flood, 0 = no flood
#1 Elevation
elev_comb <- elevation %>%
select(OBJECTID, MEAN) %>%
rename(mean_elev= MEAN)
#2 Slope
slope_comb <- slope %>%
select(OBJECTID, MAX) %>%
rename(max_slope= MAX)
# maybe consider mean for model
#3 Water body
water_comb <- water_body %>%
select(OBJECTID, MIN) %>%
rename(min_dist_water= MIN)
#4 Flow accumulation
fac_comb <-  flow_acc %>%
select(OBJECTID, MEAN) %>%
rename(mean_fac= MEAN)
#changed from max to mean
#5 Land Use/Permeability
# Use max, it's dummy var, as.factor
lu_comb <- land_use %>%
select(OBJECTID, MAX)%>%
rename(land_use = MAX) %>%
mutate(land_use = factor(land_use))
# Urban = 1 , non-urban = 0
# Combining the tables (think of another way to do this) consider merge?
flood_comb <- flood %>%
inner_join(elev_comb, by = "OBJECTID") %>%
inner_join(slope_comb, by = "OBJECTID") %>%
inner_join(water_comb, by = "OBJECTID") %>%
inner_join(fac_comb, by = "OBJECTID")
floodPlotVariables <-
flood_comb %>%
as.data.frame() %>%
select(flood, mean_elev, max_slope, min_dist_water, mean_fac) %>%
gather(variable, value, -flood)
# Combine all data sets for model building
model_data <- flood %>%
inner_join(elev_comb, by = "OBJECTID") %>%
inner_join(slope_comb, by = "OBJECTID") %>%
inner_join(water_comb, by = "OBJECTID") %>%
inner_join(fac_comb, by = "OBJECTID") %>%
mutate(flood = as.factor(flood))
# Creating training and test sets
set.seed(3456)
trainIndex <- createDataPartition(model_data$flood, p = .70,
list = FALSE,
times = 1)
floodTrain <- model_data[ trainIndex,]
floodTest  <- model_data[-trainIndex,]
floodModel <- glm(flood ~ .,
family="binomial"(link="logit"), data = floodTrain %>%
as.data.frame() %>%
select(-OBJECTID))
summary(floodModel)
## check from this point, something wrong, observation out put is 1 and 2 instead of 0 and 1
classProbs <- predict(floodModel, floodTest, type="response")
hist(classProbs)
testProbs <- data.frame(obs = as.factor(floodTest$flood),
pred = classProbs)
ggplot(testProbs, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
ylab("Frequency")+
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Flood","Flood"),
name = "")+
plotTheme
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
# why is plot not showing up?
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, linewidth = 1.5, color = 'grey')
str(testProbs)
library(ggplot2)
library(pROC)
# why is plot not showing up?
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
theme_grey()
# why is plot not showing up?
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
# why is plot not showing up?
object <- ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 10, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
view(object)
rm(object)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(knitr)
preserve <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/fishnet3k_pa_JoinDEM_Slope_distSlope_distUrban_landCover_distRivers.geojson")
protected <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/pa_protected_lands2.geojson")
preservePlotVariables <-
preserve %>%
as.data.frame() %>%
select(preserve,elevation,slope,dSteepSlop,dUrban,distRivers) %>%
gather(variable, value, -preserve)
preserve %>% as.data.frame() %>%
select(preserve,elevation,slope,dSteepSlop,dUrban,distRivers) %>%
pivot_longer(cols = -preserve)
preserve <-
preserve %>%
select(preserve,elevation,slope,dSteepSlop,landCover,dUrban,distRivers, Id) %>%
mutate(landCover = as.factor(landCover))
set.seed(3456)
trainIndex <- createDataPartition(preserve$landCover, p = .70,
list = FALSE,
times = 1)
preserveTrain <- preserve[ trainIndex,]
preserveTest  <- preserve[-trainIndex,]
preserveModel <- glm(preserve ~ .,
family="binomial"(link="logit"), data = preserveTrain %>%
as.data.frame() %>%
select(-geometry, -Id))
summary(preserveModel)
classProbs <- predict(preserveModel, preserveTest, type="response")
hist(classProbs)
testProbs <- data.frame(obs = as.numeric(preserveTest$preserve),
pred = classProbs)
ggplot(testProbs, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
ylab("Frequency")+
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Preserved","Preserved"),
name = "")+
plotTheme
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
View(testProbs)
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
## check from this point, something wrong, observation out put is 1 and 2 instead of 0 and 1
classProbs <- predict(floodModel, floodTest, type="response")
hist(classProbs)
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
testProbs <- data.frame(obs = as.factor(floodTest$flood),
pred = classProbs)
View(testProbs)
ggplot(testProbs, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
ylab("Frequency")+
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Flood","Flood"),
name = "")+
plotTheme
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
#code from conservation predictive modeling
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
View(testProbs)
preserveModel <- glm(preserve ~ .,
family="binomial"(link="logit"), data = preserveTrain %>%
as.data.frame() %>%
select(-geometry, -Id))
classProbs <- predict(preserveModel, preserveTest, type="response")
hist(classProbs)
testProbs <- data.frame(obs = as.numeric(preserveTest$preserve),
pred = classProbs)
ggplot(testProbs, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
ylab("Frequency")+
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Preserved","Preserved"),
name = "")+
plotTheme
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
View(testProbs)
#code from conservation predictive modeling
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
rm(flow_acc, land_use)
rm(flow_acc, land_use, slope, water_body)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(pscl)
library(plotROC)
library(pROC)
library(sf)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tigris)
library(viridis)
library(ggplot2)
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
# dependent variable
inundation <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_depe.csv")
# independent variables
elevation <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_elev.csv")
flow_acc <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_fac.csv")
land_use <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_lulc.csv")
slope <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_slope.csv")
water_body <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_water.csv ")
water_body <- read.csv("https://raw.githubusercontent.com/luyiiw/LUEM/main/calgary_table/zonal_water.csv")
# Creating tables to combine exploratory data
flood <- inundation %>%
select(OBJECTID, RANGE) %>%
rename(flood = RANGE) %>%
mutate(flood = factor(flood))
# 1 = flood, 0 = no flood
#1 Elevation
elev_comb <- elevation %>%
select(OBJECTID, MEAN) %>%
rename(mean_elev= MEAN)
#2 Slope
slope_comb <- slope %>%
select(OBJECTID, MAX) %>%
rename(max_slope= MAX)
# maybe consider mean for model
#3 Water body
water_comb <- water_body %>%
select(OBJECTID, MIN) %>%
rename(min_dist_water= MIN)
#4 Flow accumulation
fac_comb <-  flow_acc %>%
select(OBJECTID, MEAN) %>%
rename(mean_fac= MEAN)
#changed from max to mean
#5 Land Use/Permeability
# Use max, it's dummy var, as.factor
lu_comb <- land_use %>%
select(OBJECTID, MAX)%>%
rename(land_use = MAX) %>%
mutate(land_use = factor(land_use))
# Urban = 1 , non-urban = 0
# Removing unnecessary data sets
rm(flow_acc, land_use, slope, water_body)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(knitr)
library(caret)
library(pscl)
library(plotROC)
library(pROC)
library(sf)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tigris)
library(viridis)
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
preserve <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/fishnet3k_pa_JoinDEM_Slope_distSlope_distUrban_landCover_distRivers.geojson")
protected <- st_read("https://raw.githubusercontent.com/mafichman/CPLN_675/main/Week_7_10/data/pa_conservation/pa_protected_lands2.geojson")
preserve <- preserve %>%
st_transform(crs = 2272)
protected <- protected %>%
st_transform(crs = 2272)
counties <- counties('PA') %>%
st_as_sf() %>%
st_transform(crs = 2272)
preservePlotVariables <-
preserve %>%
as.data.frame() %>%
select(preserve,elevation,slope,dSteepSlop,dUrban,distRivers) %>%
gather(variable, value, -preserve)
preserve %>% as.data.frame() %>%
select(preserve,elevation,slope,dSteepSlop,dUrban,distRivers) %>%
pivot_longer(cols = -preserve)
preserve <-
preserve %>%
select(preserve,elevation,slope,dSteepSlop,landCover,dUrban,distRivers, Id) %>%
mutate(landCover = as.factor(landCover))
set.seed(3456)
trainIndex <- createDataPartition(preserve$landCover, p = .70,
list = FALSE,
times = 1)
preserveTrain <- preserve[ trainIndex,]
preserveTest  <- preserve[-trainIndex,]
View(preserveTrain)
preserveModel <- glm(preserve ~ .,
family="binomial"(link="logit"), data = preserveTrain %>%
as.data.frame() %>%
select(-geometry, -Id))
summary(preserveModel)
View(preserveModel)
classProbs <- predict(preserveModel, preserveTest, type="response")
hist(classProbs)
testProbs <- data.frame(obs = as.numeric(preserveTest$preserve),
pred = classProbs)
View(testProbs)
ggplot(testProbs, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
ylab("Frequency")+
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("dark blue", "dark green"),
labels = c("Not Preserved","Preserved"),
name = "")+
plotTheme
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
